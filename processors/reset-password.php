<?php


require_once '../config/config.php';
require_once '../config/functions.php';


class ResetUserPassword extends  Functions{




    private $data , $username , $password;


    private $config;

    private $error,  $success_message = "Password changed successfully";

    private $successText = "success" , $errorText = "error";
    function __construct()
    {
        $this->config = new WebsiteDetails();
        parent::__construct();
    }

    private function  isReady() : bool  {

        return !empty($this->data = json_decode($_POST['data'] , true));
    }


    function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }


    private function  setDetails (){

        $this->username = $this->data['username'];
        $this->password = md5($this->data['password']);
        return true;
    }


    private function change_password () : bool {

        return $this->update_multiple_fields($this->users_table_name , ["password" => $this->password , "email_verified" => 1] , "username='{$this->username}'" );

    }


    public function  Processor (){


        if($this->isReady() && $this->setDetails() && $this->change_password()){

            $new_password_reset_code = str_shuffle($this->generateID($this->password_reset_code_length));

           $this->update_record($this->users_table_name , "password_reset_code" , $new_password_reset_code ,"username" , $this->username );


            $time = time();
            setcookie($this->config->CookieUserKey , "user_id" , $time - 30);
            $this->error = json_encode(Array($this->successText => "1" , $this->errorText => $this->success_message));
            return $this->error;



        }
    }



}

$resetUserPassword = new ResetUserPassword();


echo $resetUserPassword->Processor();

?>