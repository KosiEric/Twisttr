<?php

require_once '../config/functions.php';
require_once '../config/config.php';
require_once '../config/WordsGenerator.php';


class GameControl extends  Functions
{


    private $config, $data, $userID, $amount, $action, $game_id, $gameUserCanPlay, $gameIDUserCanPlay,
        $userCurrentGameDetail, $user_details, $showGameChat = false, $number_of_players_in_current_user_game , $gameFile,
    $point , $time , $username , $gender , $game_10_words , $start_time , $word_sent , $game_ended = false ,
$potential_winning;




    function __construct()
    {

        parent::__construct();
        $this->config = new WebsiteDetails();
    }

    function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }


    private function isReady(): bool
    {

        return !empty($this->data = json_decode($_POST['data'], true));
    }

    private function setDetails(): bool
    {

        $this->userID = $this->data["userID"];
        $this->amount = $this->data["amount"];
        $this->action = $this->data["action"];
        $this->user_details = $this->fetch_data_from_table($this->users_table_name, "user_id", $this->userID)[0];

        return true;
    }

    private function create_a_new_game()
    {

        $this->game_id = $this->generateID($this->config->GameIDLength);
        if ($this->record_exists_in_table($this->games_table_name, "game_id", $this->game_id))
            $this->create_games_table();

        $words_generator = new WordsGenerator();

        $words = $words_generator->generateRandomWords();
        $words_to_json = json_encode($words);
        $this->game_10_words = $words;
        $this->start_time = time() * 1000;

        $this->insert_into_table($this->games_table_name, ["game_id" => $this->game_id, "words" => $words_to_json, "amount" => $this->amount,
            "started" => "0", "start_time" => $this->start_time, "number_of_players" => "1", "current_word" => $words[0]]);
        $this->update_multiple_fields($this->users_table_name, ["game_id_about_to_play" => $this->game_id], "user_id='{$this->userID}'");

    }

    private function  add_word_to_game() : bool {

        $this->point = $this->data["point"];
        $this->username = $this->user_details["username"];
        $this->gender = $this->user_details["gender"];
        $this->word_sent = $this->data['word'];






        $this->userCurrentGameDetail = $this->fetch_data_from_table($this->games_table_name, 'game_id', $this->user_details["game_id_about_to_play"])[0];

         $this->game_id = $this->userCurrentGameDetail['game_id'];

         $this->point = (!empty($this->fetch_data_from_table_with_conditions($this->game_words_table_name , "word = '{$this->word_sent}' AND game_id = '{$this->game_id}'"))) ? 0 : $this->point;

        $this->game_ended = ($this->fetch_data_from_table($this->games_table_name, 'game_id' , $this->game_id)[0]['game_ended']) == '1';
        if($this->game_ended)
        {
            $this->point = 0;
            return true;
        }
        $this->insert_into_table($this->game_words_table_name , ['game_id' => $this->game_id ,
            'user_id' => $this->userID ,
            'username' => $this->username ,
            'word' => $this->word_sent ,
            'point' => $this->point ,
            'gender' => $this->gender,
        ]);

        $this->executeSQL("UPDATE {$this->users_table_name} SET current_point = current_point + {$this->point} WHERE user_id = '{$this->userID}'");
        return true;


    }


    private function  endGame() : string {

        $this->game_id = $this->user_details["game_id_about_to_play"];
        $players = $this->fetch_data_from_table_with_conditions($this->users_table_name , "game_id_about_to_play = '{$this->game_id}' ORDER BY current_point DESC");
        $winner = $players[0];
        $winner_id = $winner['user_id'];
        $winner_current_point = $winner["current_point"];
        $this->potential_winning = ($this->config->MaximumNumberOfPlayers -  1) * $this->amount;
        $date = date("l jS \of F Y h:i:s A");
        $this->update_multiple_fields($this->users_table_name ,
            ["total_wins" => "total_wins + 1" ,
                "total_amount_won" => "total_amount_won + {$this->potential_winning}"
            ,   "last_amount_won" => "{$this->potential_winning}" ,
                "last_win_date" => $date
            ]

            , "user_id = '{$winner_id}'");
        $count = 0;
        $user_position= 0;

        $game_already_closed_before_now = $this->fetch_data_from_table($this->games_table_name , 'game_id' , $this->game_id)[0]['game_ended'] == '1';
        if(!$game_already_closed_before_now)  $this->update_record($this->games_table_name , 'game_ended' , '1' , 'game_id' , $this->game_id);


        foreach ($players as $player){
            $count++;
            if($player['user_id'] == $this->userID) $user_position = $count;
            $player_id = $player["user_id"];
            $current_point = $player["current_point"];
        if(!$game_already_closed_before_now) {
            $this->update_multiple_fields($this->users_table_name, [
                "total_point" => "total_point + {$current_point}",
                "total_games_played" => "total_games_played + 1",
                "last_played_game_id" => "{$this->game_id}"
                /*" last_played_date" => "{$date}" */
            ] , "game_id_about_to_play = '{$this->game_id}'");
        }

        }

        $user_position_string = "";
        switch ($user_position){
            case 2 :
                $user_position_string = "2nd";
                break;
            case 3 :
                $user_position_string = "3rd";
                break;
            default :
                $user_position_string = $user_position."th";
                break;



        }

        $message = ($winner_id == $this->userID) ? "Congrats! you just won &#8358; {$this->potential_winning} with {$winner_current_point} points"
            : "{$winner['username']} won, with  total  of {$winner_current_point} points, you came {$user_position_string} with {$this->user_details['current_point']} points";
if(!$game_already_closed_before_now) {
    $this->update_record($this->users_table_name, "account_balance", "account_balance + {$this->potential_winning}", "user_id", $winner_id);
}
        return json_encode(["message" => $message , "end" => true]);

    }


    private function any_existing_game_user_can_play()
    {


        $this->gameUserCanPlay = $this->fetch_data_from_table_with_conditions($this->games_table_name,
            "amount = '{$this->amount}' and started = '0' and number_of_players < {$this->config->MaximumNumberOfPlayers}");

        if (!empty($this->gameUserCanPlay)) {

            $this->gameUserCanPlay = $this->gameUserCanPlay[0];
            $this->gameIDUserCanPlay = $this->gameUserCanPlay["game_id"];
            return true;
        }

        return false;

    }

    //Adds the user to an existing game
    private function add_user_to_existing_game()
    {

        $number_of_existing_players = intval($this->gameUserCanPlay["number_of_players"]) + 1;
        $this->number_of_players_in_current_user_game = $number_of_existing_players;
        $this->update_multiple_fields($this->games_table_name, ["number_of_players" => $number_of_existing_players], "game_id ='{$this->gameIDUserCanPlay}'");
        $this->update_multiple_fields($this->users_table_name, ["game_id_about_to_play" => $this->gameIDUserCanPlay], "user_id='{$this->userID}'");
        $this->game_10_words = $this->fetch_data_from_table($this->games_table_name , 'game_id' , $this->gameIDUserCanPlay)[0]["words"];
        $this->game_10_words = json_decode($this->game_10_words);

        /* if players are complete game should start */
        if ($number_of_existing_players == $this->config->MaximumNumberOfPlayers) {
            /* tell javascript that the game has started */
            $this->update_record($this->games_table_name, 'started', '1', 'game_id', $this->gameIDUserCanPlay);
            /* update current_game_id for all users in game */
            $this->update_record($this->users_table_name , 'current_game_id' , $this->gameIDUserCanPlay , 'game_id_about_to_play' , $this->gameIDUserCanPlay );
            /* Subtract the amount for all players */
            //$this->update_multiple_fields($this->users_table_name , ['account_balance' => " account_balance - {$this->amount}"] , "game_id_about_to_play = '{$this->gameIDUserCanPlay}'");
            /* Make sure all users point is set to 0  immediately game starts and ends*/
            $this->executeSQL("UPDATE {$this->users_table_name} SET account_balance = account_balance - {$this->amount} WHERE game_id_about_to_play = '{$this->game_id}'");
            $this->update_record($this->users_table_name , 'current_point' , 0 , 'game_id_about_to_play' , $this->gameIDUserCanPlay);
            $this->start_time = time() * 1000;
            $this->update_record($this->games_table_name , 'start_time' , $this->start_time , 'game_id' , $this->gameIDUserCanPlay);

            $this->showGameChat = true;

        }

        return true;
    }


    private function get_total_number_of_players_playing_now () {
        $total_number_of_users_playing = count($this->fetch_data_from_table_with_conditions($this->games_table_name , "started='1'"));
        $total_number_of_users_playing = $total_number_of_users_playing * $this->config->MaximumNumberOfPlayers;

        $total_number_of_players_waiting = 0;

        $all_awaiting_games = $this->fetch_data_from_table_with_conditions($this->games_table_name , "started='0'");

        foreach ($all_awaiting_games as $awaiting_game){

            $total_number_of_players_waiting += intval($awaiting_game["number_of_players"]);
        }


        return $total_number_of_players_waiting + $total_number_of_users_playing;
    }
    private function add_current_user_to_game()
    {
        if ($this->any_existing_game_user_can_play()) {
            $this->add_user_to_existing_game();
            if ($this->showGameChat)
                return json_encode(Array("start" => "1", "players" => $this->number_of_players_in_current_user_game));
            return json_encode(Array("start" => "0", "players" => $this->number_of_players_in_current_user_game));


        } else {

            $this->create_a_new_game();
            return json_encode(Array("start" => "0", "players" => "1" , "words" => $this->game_10_words));

        }


    }

    private function  getAllWords () {


        $this->game_id = $this->user_details['game_id_about_to_play'];

        $start = $this->data["start"];
        $words = $this->fetch_data_from_table_with_conditions($this->game_words_table_name , "game_id = '{$this->game_id}' AND user_id != '{$this->userID}' ORDER BY id ASC LIMIT  {$start} , 100");
        $new_start_position = count($words) + $start;
// <span class="word-sender-name"> - <span id="points-earned" class="points-earned-by-word"> points</span> </span>
        $data = "";

        foreach ($words as $word){

                $avatar = ($word["gender"] == "m") ? $this->config->IMG_FOLDER . 'avatar.png' : $this->config->IMG_FOLDER . 'avatar2.png';
                $data .= <<<DATA
<div class="message new"><figure class="avatar"><img src="$avatar" /></figure>{$word['word']}<span class="word-sender-name">{$word['username']} - <span id="points-earned" class="points-earned-by-word">{$word['point']} points</span> </span></div>';


DATA;


        }

        $this->game_ended = $this->fetch_data_from_table($this->games_table_name , 'game_id' , $this->game_id)[0]['game_ended'] == '1';


        return json_encode(["start" => $new_start_position , "data" => $data , "end" => $this->game_ended]);
    }

    private function get_current_players_joined()
    {


        $this->userCurrentGameDetail = $this->fetch_data_from_table($this->games_table_name, 'game_id', $this->user_details["game_id_about_to_play"])[0];
        $this->gameIDUserCanPlay = $this->userCurrentGameDetail["game_id"];
        $number_of_players = $this->userCurrentGameDetail["number_of_players"];
        $this->game_10_words = $this->userCurrentGameDetail["words"];
        $this->start_time = $this->userCurrentGameDetail["start_time"];

        if ($number_of_players == $this->config->MaximumNumberOfPlayers) {
            $this->showGameChat = true;
        }

        return $number_of_players;

    }

    private  function  exit_user_from_game() {
        $this->userCurrentGameDetail = $this->fetch_data_from_table($this->games_table_name, 'game_id', $this->user_details["game_id_about_to_play"])[0];
        $number_of_players = $this->userCurrentGameDetail["number_of_players"];

        $new_number_of_players = $number_of_players - 1;
        $this->update_record($this->games_table_name , "number_of_players" , $new_number_of_players , 'game_id' , $this->userCurrentGameDetail["game_id"]);
        $this->update_record($this->users_table_name , "game_id_about_to_play" , "0" , 'user_id' , $this->userID);
        return true;
    }

    private function getGameRanking () : string {

        $this->game_id = $this->user_details["game_id_about_to_play"];
        $this->userCurrentGameDetail = $this->fetch_data_from_table($this->games_table_name, 'game_id', $this->game_id)[0];

        if($this->userCurrentGameDetail['game_ended'] == '1') return $this->endGame();

        $players = $this->fetch_data_from_table_with_conditions($this->users_table_name , "game_id_about_to_play = '{$this->game_id}' ORDER BY current_point DESC");

        $message = "";
        if(!empty($players)) {
            $message = <<<MESSAGE
            <div class="message new"><figure class="avatar"><img src="{$this->config->IMG_FOLDER}favicon.png" /></figure><span id="game-ranking-text">ranking</span>


MESSAGE;

            $count = 0;
            foreach ($players as $player) {
                $count++;

                $message .= <<<MESSAGE

<span class="word-sender-name">{$count}. {$player['username']} - <span id="points-earned" class="points-earned-by-word">{$player['current_point']} points</span> </span>
MESSAGE;


            }


            $message .= "</div>";
        }

        return json_encode(["end" => false , "message" => $message]);

    }

    public function Processor()
    {

        if ($this->isReady() && $this->setDetails()) {

            $action = $this->data["action"];
            if($action != 'add_new_user_to_game' and in_array("time" , $this->data)){

            }
            $start = "0";
            switch ($action) {

                case 'add_new_user_to_game' :
                    return $this->add_current_user_to_game();
                    break;
                case 'update_number_of_players' :

                    $players = $this->get_current_players_joined();
                    if ($this->showGameChat) {
                        $start = "1";
                    }
                    return json_encode(Array("start" => $start, "players" => $players , "words" => $this->game_10_words ,
                        "start_time" => $this->start_time));
                    break;

                case 'get_total_number_of_players' :
                    if ($this->showGameChat) {
                        $start = "1";
                    }
                    $players = $this->get_total_number_of_players_playing_now();
                    return json_encode(["players" => $players , "start" => $start]);
                    break;
                case 'exit_user_from_game' :
                     $this->exit_user_from_game();
                     return json_encode(["success" => "1"]);
                     break;
                case 'send_word' :
                    $this->add_word_to_game();
                    return json_encode(['success' => "1" , 'end' => $this->game_ended , 'point' => $this->point]);
                   break;
                case 'get_all_words':
                    return $this->getAllWords();
                    break;
                case 'end_game' :
                    return $this->endGame();
                    break;
                case 'get_current_ranking' :
                    return $this->getGameRanking();
                    break;
            }
        }

    }


}

$GameControl = new GameControl();
echo $GameControl->Processor();









?>