<?php

// Config.php needed for getting some details about the Website

require_once '../config/config.php';


//Functions.php required to extend the Fucntions class
require_once '../config/functions.php';





// PHPMailer needed for sending account recovery link

require  '../phpmailer/PHPMailerAutoload.php';


class AccountRecovery extends  Functions
    /* This also extends the DatabaseConnection Class since Functions Class is a subclass of DatabaseConnection Class*/
{



    //Data that was sent




    private $successText = "success"; //successText needed for avoiding mispellings;
    private $errorText = "error"; // errorText needed for avoiding mispellings as well

    private $data , $username ,  $login_type , $user_details;




    //Errors that could occur


    private $error , $success_message = "email verification sent to " ,  $failedLoginMessage = "no account found for this " , $network_error = "trying checking your internet connection";

    private $config;



    private function isReady() {

        $data = ($_POST['data']) ?? null;
        if($data != null) {
            $this->data = json_decode($_POST['data'] , true);
            return true;
        }

        return false;



    }

    function __construct()
    {

        $this->config = new WebsiteDetails();
        parent::__construct();

    }

    function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    private function setDetails () : bool {

        $this->username = $this->data['username'];
        $this->login_type = $this->data['loginType'];
        $this->failedLoginMessage .= $this->login_type; // Prints out something like "no account found for this username"












        // Check if the random Digits generated already exists , if any is found to exist , this function self invokes itself



        return true;



    }


    private function  isValidUsername () : bool {

        $sql = "SELECT *  FROM {$this->users_table_name} WHERE {$this->login_type} = '{$this->username}'";
        $result = $this->conn->prepare($sql);
        $result->execute();
        $num_rows = $result->rowCount();

        if($num_rows > 0) {

            $this->user_details = $this->fetch_data_from_table($this->users_table_name , $this->login_type , $this->username)[0];
            $this->success_message.= "<b>{$this->user_details['email']}</b>";
            return true;
        }

        return false;


    }








    private function send_recovery_email()   {
        $mail = new PHPMailer;
        $time = time();

        $date = date('d-m-Y' , $time);


        // include  '../emails/basic_emails/verification_email.php';
        // include  '../emails/html_emails/verification_email.php';
        $time_string = date('h:i:s a' , $time);


        $html_email_body = <<<HTML_EMAIL_BODY

<!DOCTYPE html>
<html lang = 'en-us'>
<head>
<style type='text/css'>
#mail-logo-image {
width : 16px;
height : 16px;
position:relative;
left : 93%;

}

#email-text , #not-user-message{
font-family: 'Helvetica Neue Light',Helvetica,Arial,sans-serif;
font-size: 16px;
padding: 0px;
margin: 0px;
font-weight: normal;
line-height: 22px;
color : #222;
margin-top : 20px;
}


body {

background-color: #f5f8fa;
margin: 0;
padding: 0;

}
#final-step {

color : #222;
font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;
font-size:24px;
padding:0px;
margin:0px;
font-weight:bold;
line-height:32px;
}

#date {

  display : none;
}


@media only screen and (max-width: 600px) {

#main-mail-container-div {

width : 80%;
}


}

#container{
background-color : #e1e8ed;
}

#main-mail-container-div {

margin-left : auto;
margin-right: auto;
background-color : #fff;
width : 420px;
padding : 15px;
}
#confirmation-link{

font-size: 16px;
font-family: 'HelveticaNeue','Helvetica Neue',Helvetica,Arial,sans-serif;
color: #ffffff;
text-decoration: none;
border-radius: 4px;
padding: 11px 30px;
border: 1px solid #1da1f2;
display: inline-block;
font-weight: bold;
background-color: rgb(29, 161, 242);
margin-top : 20px;
}

#not-user-message {

font-size: 12px;


}

#site-address {
color: #8899a6;

font-family: 'Helvetica Neue Light',Helvetica,Arial,sans-serif;

font-size: 12px;

font-weight: normal;

line-height: 16px;

text-align: center;
width : 180px;
margin : auto;
}

</style>
</head>

<body>
<div id ='container'>
<div id = 'main-mail-container-div'>

<p id = 'final-step'>Final step...</p>
<p id = 'email-text'>
Dear {$this->user_details['fullname']} , <br /> <br />
You recently requested for an account recovery for your email  <strong>{$this->user_details['email']}</strong>. It's easy — just click the button below. 

</p>

<a href = "{$this->config->SiteNameWithHttps}/play?action=account_recovery&code={$this->user_details['password_reset_code']}" title='Recover your account' id = 'confirmation-link'>Recover account</a>

<p id = 'not-user-message'>

This email was automatically sent to you by {$this->config->SiteName}.Please do not reply to this email. If you have any question, do not hesistate to <a href="{$this->config->SiteNameWithHttps}">contact us.</a>  Thank you.
</p>
<p id = 'site-address'>
{$this->config->SiteName} International ﻿Company.
{$this->config->HeadOffice}
</p>
<br />
<span id = "date">{$time_string}</span>;

</div>


</div>

</body>

</html> 



HTML_EMAIL_BODY;
        $html_email_body;
        $basic_email_body = <<<BASIC_EMAIL_BODY

<!DOCTYPE html>
<html lang='en-us' dir='ltr'>
<body>

Dear {$this->user_details['fullname']} ,<br /><br />

You recently requested for an account recovery for your email  <strong>{$this->user_details['email']}</strong>. It's easy — just click the link below. 


<br />
<br/>
<strong>Recovery Link</strong><br>
<a href = "{$this->config->SiteNameWithHttps}/play?action=account_recovery&code={$this->user_details['password_reset_code']}" title='Recover your account' id = 'confirmation-link'>Recover account</a>

<br /><br />

This email was automatically sent to you by {$this->config->SiteName} .Please do not reply to this email.
If you have any question, do not hesistate to <a href="{$this->config->SiteNameWithHttps}">contact us</a>.
Thank you.<br /><br />



The {$this->config->SiteName} Team <br /> <br />
<span style="display: none;">{$time_string}</span> 
</body>
</html>

BASIC_EMAIL_BODY;


        $mail->isSMTP();                                      // Set mailer to use SMTP
        $mail->Host = $this->config->PrimaryEmailServer;  // Specify main and backup SMTP servers
        $mail->SMTPAuth = true;
//$mail->SMTPDebug = 3;                              // Enable SMTP authentication
        $mail->Username = $this->config->PrimaryEmail;                 // SMTP username
        $mail->Password = $this->config->PrimaryEmailPassword;                           // SMTP password
        $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
        $mail->Port = 587;                                    // TCP port to connect to
        $site_author = $this->config->SiteAuthor;
        $primary_email = $this->config->PrimaryEmail;
        $primary_email_server = $this->config->PrimaryEmailServer;
        $primary_email_password = $this->config->PrimaryEmailPassword;

        try {
            $mail->setFrom($primary_email_server, "{$site_author} From {$this->config->SiteName}");
        } catch (phpmailerException $e) {
            //  echo $e->getMessage();
            return false;
        }

        $mail->addAddress($this->user_details['email'], $this->user_details['fullname']);     // Add a recipient
//$mail->addAddress('ellen@example.com');               // Name is optional
        $mail->addReplyTo($primary_email, $this->config->SiteName);

// $mail->addCC('cc@example.com');
//$mail->addBCC('bcc@example.com');

//$mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments
//$mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name
        $mail->isHTML(true);                                  // Set email format to HTML
        $mail->Subject = "Recover your {$this->config->SiteName} account, {$this->user_details['fullname']}";
        $mail->Body = $html_email_body;
        $mail->AltBody = $basic_email_body;
        if(!$mail->send()) {
            //  echo 'Mailer Error: ' . $mail->ErrorInfo;
            return false;
        } else {
            return  true;
        }

    }





    public function Processor () {

        if($this->isReady() && $this->setDetails()){

                if(!$this->isValidUsername())
                    return $this->error = json_encode(Array($this->successText => "0" , $this->errorText => $this->failedLoginMessage));
                if(!$this->send_recovery_email())
                    return $this->error = json_encode(Array($this->successText => "0" , $this->errorText => $this->network_error));

                $this->error = json_encode(Array($this->successText => "1" , $this->errorText => $this->success_message));
                return $this->error;








            }

    }



}

$accountRecovery = new AccountRecovery();
echo  $accountRecovery->Processor();
?>