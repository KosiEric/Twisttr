<?php

// Config.php needed for getting some details about the Website

require_once '../config/config.php';


//Functions.php required to extend the Fucntions class
require_once '../config/functions.php';


class UserLogin extends  Functions
    /* This also extends the DatabaseConnection Class since Functions Class is a subclass of DatabaseConnection Class*/
{



    //Data that was sent




    private $successText = "success"; //successText needed for avoiding mispellings;
    private $errorText = "error"; // errorText needed for avoiding mispellings as well

    private $data , $username , $password , $remember_me , $login_type;




    //Errors that could occur


    private $error , $success_message = "login successful, please wait..." , $usernameAndPasswordMismatchError = "username and password do not match" , $failedLoginMessage = "Login details donot match any account";

    private $config;



    private function isReady() : bool {

        $data = ($_POST['data']) ?? null;
        if($data != null) {
            $this->data = json_decode($_POST['data'] , true);
            return true;
        }

            return false;



    }

    function __construct()
    {

        $this->config = new WebsiteDetails();
        parent::__construct();

    }

    function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    private function setDetails () : bool {

            $this->username = $this->data['username'];
            $this->password = md5($this->data['password']);
            $this->remember_me = $this->data['rememberMe'];

            $this->login_type = $this->data['loginType'];










        // Check if the random Digits generated already exists , if any is found to exist , this function self invokes itself



        return true;



    }


    private function  isValidLoginDetails () : bool {

        $sql = "SELECT *  FROM {$this->users_table_name} WHERE {$this->login_type} = '{$this->username}' AND password = '{$this->password}'";
        $result = $this->conn->prepare($sql);
        $result->execute();
        $num_rows = $result->rowCount();

        return $num_rows > 0;

    }




    public function Processor () {

        if($this->isReady()){
            if($this->setDetails()){
                if($this->isValidLoginDetails()){
                    $user_id = $this->fetch_data_from_table($this->users_table_name , $this->login_type , $this->username)[0]['user_id'];
                    $time = time();

                    if($this->remember_me == "1") {
                        $thirty_days_from_now = (86400 * 30) + $time;


                        setcookie($this->config->CookieUserKey , $user_id , $thirty_days_from_now , "/");

                    }

                    else {

                        setcookie($this->config->CookieUserKey , $user_id , $time - 30);
                    }


                    $this->error = json_encode(Array($this->successText => "1" , $this->errorText => $this->success_message));
                    return $this->error;
                }

                else if($this->record_exists_in_table($this->users_table_name , $this->login_type , $this->username)){
                    $this->error = json_encode(Array($this->successText => "0" , $this->errorText => $this->usernameAndPasswordMismatchError));
                    return $this->error;

                }
                else {

                    $this->error = json_encode(Array($this->successText => "0" , $this->errorText => $this->failedLoginMessage));
                    return $this->error;

                }
            }
        }
    }



}

$userLogin = new UserLogin();
echo  $userLogin->Processor();
?>